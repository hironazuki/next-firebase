schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""
columns and relationships of "loved_language"
"""
type loved_language {
  name: String!

  """An object relationship"""
  programming_language: programming_language!

  """An object relationship"""
  user: users!
  user_id: String!
}

"""
aggregated selection of "loved_language"
"""
type loved_language_aggregate {
  aggregate: loved_language_aggregate_fields
  nodes: [loved_language!]!
}

"""
aggregate fields of "loved_language"
"""
type loved_language_aggregate_fields {
  count(columns: [loved_language_select_column!], distinct: Boolean): Int
  max: loved_language_max_fields
  min: loved_language_min_fields
}

"""
order by aggregate values of table "loved_language"
"""
input loved_language_aggregate_order_by {
  count: order_by
  max: loved_language_max_order_by
  min: loved_language_min_order_by
}

"""
input type for inserting array relation for remote table "loved_language"
"""
input loved_language_arr_rel_insert_input {
  data: [loved_language_insert_input!]!
}

"""
Boolean expression to filter rows from the table "loved_language". All fields are combined with a logical 'AND'.
"""
input loved_language_bool_exp {
  _and: [loved_language_bool_exp]
  _not: loved_language_bool_exp
  _or: [loved_language_bool_exp]
  name: String_comparison_exp
  programming_language: programming_language_bool_exp
  user: users_bool_exp
  user_id: String_comparison_exp
}

"""
input type for inserting data into table "loved_language"
"""
input loved_language_insert_input {
  name: String
  programming_language: programming_language_obj_rel_insert_input
}

"""aggregate max on columns"""
type loved_language_max_fields {
  name: String
  user_id: String
}

"""
order by max() on columns of table "loved_language"
"""
input loved_language_max_order_by {
  name: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type loved_language_min_fields {
  name: String
  user_id: String
}

"""
order by min() on columns of table "loved_language"
"""
input loved_language_min_order_by {
  name: order_by
  user_id: order_by
}

"""
response of any mutation on the table "loved_language"
"""
type loved_language_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [loved_language!]!
}

"""
input type for inserting object relation for remote table "loved_language"
"""
input loved_language_obj_rel_insert_input {
  data: loved_language_insert_input!
}

"""
ordering options when selecting data from "loved_language"
"""
input loved_language_order_by {
  name: order_by
  programming_language: programming_language_order_by
  user: users_order_by
  user_id: order_by
}

"""
primary key columns input for table: "loved_language"
"""
input loved_language_pk_columns_input {
  name: String!
  user_id: String!
}

"""
select columns of table "loved_language"
"""
enum loved_language_select_column {
  """column name"""
  name

  """column name"""
  user_id
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "loved_language"
  """
  delete_loved_language(
    """filter the rows which have to be deleted"""
    where: loved_language_bool_exp!
  ): loved_language_mutation_response

  """
  delete single row from the table: "loved_language"
  """
  delete_loved_language_by_pk(name: String!, user_id: String!): loved_language

  """
  insert data into the table: "loved_language"
  """
  insert_loved_language(
    """the rows to be inserted"""
    objects: [loved_language_insert_input!]!
  ): loved_language_mutation_response

  """
  insert a single row into the table: "loved_language"
  """
  insert_loved_language_one(
    """the row to be inserted"""
    object: loved_language_insert_input!
  ): loved_language

  """
  insert data into the table: "programming_language"
  """
  insert_programming_language(
    """the rows to be inserted"""
    objects: [programming_language_insert_input!]!

    """on conflict condition"""
    on_conflict: programming_language_on_conflict
  ): programming_language_mutation_response

  """
  insert a single row into the table: "programming_language"
  """
  insert_programming_language_one(
    """the row to be inserted"""
    object: programming_language_insert_input!

    """on conflict condition"""
    on_conflict: programming_language_on_conflict
  ): programming_language

  """
  update data of the table: "programming_language"
  """
  update_programming_language(
    """increments the integer columns with given value of the filtered values"""
    _inc: programming_language_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: programming_language_set_input

    """filter the rows which have to be updated"""
    where: programming_language_bool_exp!
  ): programming_language_mutation_response

  """
  update single row of the table: "programming_language"
  """
  update_programming_language_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: programming_language_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: programming_language_set_input
    pk_columns: programming_language_pk_columns_input!
  ): programming_language

  """
  update data of the table: "users"
  """
  update_users(
    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input

    """filter the rows which have to be updated"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  update single row of the table: "users"
  """
  update_users_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input
    pk_columns: users_pk_columns_input!
  ): users
}

"""
columns and relationships of "online_users"
"""
type online_users {
  id: String
  last_seen: timestamptz

  """An object relationship"""
  user: users
}

"""
Boolean expression to filter rows from the table "online_users". All fields are combined with a logical 'AND'.
"""
input online_users_bool_exp {
  _and: [online_users_bool_exp]
  _not: online_users_bool_exp
  _or: [online_users_bool_exp]
  id: String_comparison_exp
  last_seen: timestamptz_comparison_exp
  user: users_bool_exp
}

"""
ordering options when selecting data from "online_users"
"""
input online_users_order_by {
  id: order_by
  last_seen: order_by
  user: users_order_by
}

"""
select columns of table "online_users"
"""
enum online_users_select_column {
  """column name"""
  id

  """column name"""
  last_seen
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "programming_language"
"""
type programming_language {
  """An array relationship"""
  loved_languages(
    """distinct select on columns"""
    distinct_on: [loved_language_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [loved_language_order_by!]

    """filter the rows returned"""
    where: loved_language_bool_exp
  ): [loved_language!]!

  """An aggregated array relationship"""
  loved_languages_aggregate(
    """distinct select on columns"""
    distinct_on: [loved_language_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [loved_language_order_by!]

    """filter the rows returned"""
    where: loved_language_bool_exp
  ): loved_language_aggregate!
  name: String!
  vote_count: Int!
}

"""
input type for inserting array relation for remote table "programming_language"
"""
input programming_language_arr_rel_insert_input {
  data: [programming_language_insert_input!]!
  on_conflict: programming_language_on_conflict
}

"""
Boolean expression to filter rows from the table "programming_language". All fields are combined with a logical 'AND'.
"""
input programming_language_bool_exp {
  _and: [programming_language_bool_exp]
  _not: programming_language_bool_exp
  _or: [programming_language_bool_exp]
  loved_languages: loved_language_bool_exp
  name: String_comparison_exp
  vote_count: Int_comparison_exp
}

"""
unique or primary key constraints on table "programming_language"
"""
enum programming_language_constraint {
  """unique or primary key constraint"""
  programming_language_pkey
}

"""
input type for incrementing integer column in table "programming_language"
"""
input programming_language_inc_input {
  vote_count: Int
}

"""
input type for inserting data into table "programming_language"
"""
input programming_language_insert_input {
  loved_languages: loved_language_arr_rel_insert_input
  name: String
}

"""
response of any mutation on the table "programming_language"
"""
type programming_language_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [programming_language!]!
}

"""
input type for inserting object relation for remote table "programming_language"
"""
input programming_language_obj_rel_insert_input {
  data: programming_language_insert_input!
  on_conflict: programming_language_on_conflict
}

"""
on conflict condition type for table "programming_language"
"""
input programming_language_on_conflict {
  constraint: programming_language_constraint!
  update_columns: [programming_language_update_column!]!
  where: programming_language_bool_exp
}

"""
ordering options when selecting data from "programming_language"
"""
input programming_language_order_by {
  loved_languages_aggregate: loved_language_aggregate_order_by
  name: order_by
  vote_count: order_by
}

"""
primary key columns input for table: "programming_language"
"""
input programming_language_pk_columns_input {
  name: String!
}

"""
select columns of table "programming_language"
"""
enum programming_language_select_column {
  """column name"""
  name

  """column name"""
  vote_count
}

"""
input type for updating data in table "programming_language"
"""
input programming_language_set_input {
  vote_count: Int
}

"""
update columns of table "programming_language"
"""
enum programming_language_update_column {
  """column name"""
  vote_count
}

"""query root"""
type query_root {
  """
  fetch data from the table: "loved_language"
  """
  loved_language(
    """distinct select on columns"""
    distinct_on: [loved_language_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [loved_language_order_by!]

    """filter the rows returned"""
    where: loved_language_bool_exp
  ): [loved_language!]!

  """
  fetch aggregated fields from the table: "loved_language"
  """
  loved_language_aggregate(
    """distinct select on columns"""
    distinct_on: [loved_language_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [loved_language_order_by!]

    """filter the rows returned"""
    where: loved_language_bool_exp
  ): loved_language_aggregate!

  """fetch data from the table: "loved_language" using primary key columns"""
  loved_language_by_pk(name: String!, user_id: String!): loved_language

  """
  fetch data from the table: "online_users"
  """
  online_users(
    """distinct select on columns"""
    distinct_on: [online_users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [online_users_order_by!]

    """filter the rows returned"""
    where: online_users_bool_exp
  ): [online_users!]!

  """
  fetch data from the table: "programming_language"
  """
  programming_language(
    """distinct select on columns"""
    distinct_on: [programming_language_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [programming_language_order_by!]

    """filter the rows returned"""
    where: programming_language_bool_exp
  ): [programming_language!]!

  """
  fetch data from the table: "programming_language" using primary key columns
  """
  programming_language_by_pk(name: String!): programming_language

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(id: String!): users
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "loved_language"
  """
  loved_language(
    """distinct select on columns"""
    distinct_on: [loved_language_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [loved_language_order_by!]

    """filter the rows returned"""
    where: loved_language_bool_exp
  ): [loved_language!]!

  """
  fetch aggregated fields from the table: "loved_language"
  """
  loved_language_aggregate(
    """distinct select on columns"""
    distinct_on: [loved_language_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [loved_language_order_by!]

    """filter the rows returned"""
    where: loved_language_bool_exp
  ): loved_language_aggregate!

  """fetch data from the table: "loved_language" using primary key columns"""
  loved_language_by_pk(name: String!, user_id: String!): loved_language

  """
  fetch data from the table: "online_users"
  """
  online_users(
    """distinct select on columns"""
    distinct_on: [online_users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [online_users_order_by!]

    """filter the rows returned"""
    where: online_users_bool_exp
  ): [online_users!]!

  """
  fetch data from the table: "programming_language"
  """
  programming_language(
    """distinct select on columns"""
    distinct_on: [programming_language_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [programming_language_order_by!]

    """filter the rows returned"""
    where: programming_language_bool_exp
  ): [programming_language!]!

  """
  fetch data from the table: "programming_language" using primary key columns
  """
  programming_language_by_pk(name: String!): programming_language

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(id: String!): users
}

scalar timestamptz

"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
columns and relationships of "users"
"""
type users {
  id: String!
  name: String!
}

"""
Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
"""
input users_bool_exp {
  _and: [users_bool_exp]
  _not: users_bool_exp
  _or: [users_bool_exp]
  id: String_comparison_exp
  name: String_comparison_exp
}

"""
unique or primary key constraints on table "users"
"""
enum users_constraint {
  """unique or primary key constraint"""
  users_pkey
}

"""
response of any mutation on the table "users"
"""
type users_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [users!]!
}

"""
on conflict condition type for table "users"
"""
input users_on_conflict {
  constraint: users_constraint!
  update_columns: [users_update_column!]!
  where: users_bool_exp
}

"""
ordering options when selecting data from "users"
"""
input users_order_by {
  id: order_by
  name: order_by
}

"""
primary key columns input for table: "users"
"""
input users_pk_columns_input {
  id: String!
}

"""
select columns of table "users"
"""
enum users_select_column {
  """column name"""
  id

  """column name"""
  name
}

"""
input type for updating data in table "users"
"""
input users_set_input {
  last_seen: timestamptz
  name: String
}

"""
update columns of table "users"
"""
enum users_update_column {
  """column name"""
  last_seen

  """column name"""
  name
}
